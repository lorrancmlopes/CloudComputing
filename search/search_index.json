{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Roteiro: configura\u00e7\u00e3o de uma fun\u00e7\u00e3o do Lambda para acessar o Amazon RDS em uma Amazon VPC","text":"<ul> <li>Aluno: Lorran Caetano Machado Lopes</li> <li>Curso: Engenharia da Computa\u00e7\u00e3o</li> <li>Semestre: 6</li> <li>Contato: lorrancml@al.insper.edu.br</li> <li>Ano: 2023</li> </ul>"},{"location":"#pre-requisitos","title":"Pr\u00e9-requisitos","text":"<p>Para seguir esse tutorial \u00e9 necess\u00e1rio:</p> <ul> <li>Ubuntu &gt; 20.0 ou WSL2</li> <li>Conta da AWS:  uma conta com permiss\u00f5es de administrador.</li> <li>Terraform </li> </ul> <p>Info</p> <p>Voc\u00ea pode se cadastrar em uma conta da AWS aqui:</p> <ul> <li>http://portal.aws.amazon.com/billing/signup</li> </ul> <p>Caso n\u00e3o tenha o Terraform instalado em sua m\u00e1quina, voc\u00ea pode obt\u00ea-lo aqui:</p> <ul> <li>https://developer.hashicorp.com/terraform/downloads</li> </ul>"},{"location":"#motivacao","title":"Motiva\u00e7\u00e3o","text":"<p>Ao concluir esse roteiro, teremos provisionado uma arquitetura que contem uma fun\u00e7\u00e3o Lambda que grava dados em um banco de dados do Amazon RDS, por meio da leitura de dados de uma fila do Amazon SQS sempre que uma mensagem \u00e9 adicionada.  Ao usar o Lambda para acessar seu banco de dados, voc\u00ea pode ler e gravar dados em resposta a eventos. Sua fun\u00e7\u00e3o e inst\u00e2ncia de banco de dados tamb\u00e9m se escalam automaticamente para atender a per\u00edodos de alta demanda.</p>"},{"location":"#_1","title":"Home","text":""},{"location":"#aws","title":"AWS","text":"<p>A Amazon Web Services (AWS) \u00e9 a plataforma de nuvem mais adotada e mais abrangente do mundo, oferecendo mais de 200 servi\u00e7os completos de datacenters em todo o mundo. Milh\u00f5es de clientes, incluindo as startups que crescem mais r\u00e1pido, as maiores empresas e os maiores \u00f3rg\u00e3os governamentais, est\u00e3o usando a AWS para reduzir custos, ganhar agilidade e inovar mais rapidamente.</p> <p>Para conseguir interagir com os servi\u00e7os e fun\u00e7\u00f5es que a AWS prov\u00e9m, por meio de IaC (Infrastructure as Code), \u00e9 necess\u00e1rio obter chaves de acesso, que permitam o gerenciamento e provisionamento dos recursos que desejamos alocar na nuvem.</p> <p>Guarde a chave de acesso para criar vari\u00e1veis de ambiente antes de iniciar o Terraform, na fase final do roteiro.</p>"},{"location":"#rds","title":"RDS","text":"<p>O Amazon RDS (Relational Database Service) \u00e9 um servi\u00e7o de banco de dados gerenciado da AWS que permite criar e gerenciar bancos de dados relacionais, como MySQL, PostgreSQL, Oracle, SQL Server, entre outros. O RDS gerencia tarefas como provisionamento de hardware, instala\u00e7\u00e3o de software, backup e recupera\u00e7\u00e3o, bem como monitoramento e dimensionamento autom\u00e1tico.</p>"},{"location":"#funcoes-aws-lambda","title":"Fun\u00e7\u00f5es AWS Lambda","text":"<p>O AWS Lambda \u00e9 um servi\u00e7o de computa\u00e7\u00e3o sem servidor e orientado a eventos que permite executar c\u00f3digo para praticamente qualquer tipo de aplica\u00e7\u00e3o ou servi\u00e7o de backend sem provisionar ou gerenciar servidores. \u00c9 poss\u00edvel acionar o Lambda a partir de mais de 200 servi\u00e7os da AWS e aplica\u00e7\u00f5es de software como servi\u00e7o (SaaS). Nesse roteiro, voc\u00ea ir\u00e1 usar o Lambda para abrir uma conex\u00e3o com uma inst\u00e2ncia de banco de dados do Amazon RDS e para realizar opera\u00e7\u00f5es de cria\u00e7\u00e3o e leitura em um banco de dados do Amazon RDS.</p>"},{"location":"#aws-sqs","title":"AWS SQS","text":"<p>O Amazon Simple Queue Service (AWS SQS) \u00e9 um servi\u00e7o de mensagens gerenciadas pela Amazon Web Services (AWS) que permite que diferentes componentes de um sistema se comuniquem entre si de forma ass\u00edncrona. Ele funciona como uma fila virtual, onde as mensagens s\u00e3o armazenadas at\u00e9 que sejam processadas pelos consumidores. O SQS garante a entrega das mensagens, mesmo em situa\u00e7\u00f5es de alta demanda ou falhas tempor\u00e1rias, tornando-o uma solu\u00e7\u00e3o escal\u00e1vel e confi\u00e1vel para sistemas distribu\u00eddos.</p>"},{"location":"#amazon-cloudwatch","title":"Amazon CloudWatch","text":"<p>O Amazon CloudWatch \u00e9 um servi\u00e7o de monitoramento e observabilidade oferecido pela Amazon Web Services (AWS). Ele permite que voc\u00ea colete, monitore e analise m\u00e9tricas, logs e eventos gerados pelos recursos e aplicativos em execu\u00e7\u00e3o na AWS. O CloudWatch oferece uma vis\u00e3o abrangente do desempenho e sa\u00fade dos seus sistemas, permitindo que voc\u00ea identifique problemas, tome decis\u00f5es baseadas em dados e tome a\u00e7\u00f5es corretivas.</p>"},{"location":"#iniciando-nossa-infraestrutura","title":"Iniciando nossa infraestrutura","text":"<p>Crie uma pasta para organizar nossos arquivos chamada terraform:</p> <pre><code>mkdir terraform \ncd terraform\n</code></pre> <p>Crie tamb\u00e9m um arquivo main.tf. Nele, criaremos todos os nossos recursos.</p> <pre><code>touch main.tf\n</code></pre> <p>Primeiramente, iremos criar uma inst\u00e2ncia de banco de dados do Amazon RDS. Para tanto, podemos inserir o trecho abaxaixo no nosso main.tf:</p> main.tf<pre><code># Cria uma inst\u00e2ncia de banco de dados do Amazon RDS\nresource \"aws_db_instance\" \"example\" {\nengine                = \"mysql\"\nidentifier            = \"mysqlforlambdaterraform\"\nallocated_storage     = 5\nmax_allocated_storage = 100\ninstance_class        = \"db.t2.micro\"\npublicly_accessible   = false\n\ndb_name             = \"ExampleDB\"\nusername            = \"admin\"\npassword            = \"senhaDoBancoDeDados\"\nskip_final_snapshot = true\n\nvpc_security_group_ids = [aws_default_security_group.default.id]\n}\n</code></pre> <p> Voc\u00ea pode alterar o db_name, username e password pelos valores que voc\u00ea deseja para o seu banco de dados. </p> <p>Agora, antes de criar sua fun\u00e7\u00e3o do Lambda, voc\u00ea deve criar um perfil de execu\u00e7\u00e3o para dar \u00e0 sua fun\u00e7\u00e3o as permiss\u00f5es necess\u00e1rias. Para este roteiro, o Lambda precisa de permiss\u00e3o para gerenciar a conex\u00e3o de rede com a Amazon VPC contendo sua inst\u00e2ncia de banco de dados, para pesquisar mensagens de uma fila do Amazon SQS e para criar grupos de logs, fluxos de logs e enviar eventos de logs. </p> <p>Faremos isso pelo IAM. Vamos adicionar a cria\u00e7\u00e3o no main.tf.</p> main.tf<pre><code># Cria uma inst\u00e2ncia de banco de dados do Amazon RDS\nresource \"aws_db_instance\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria um perfil de execu\u00e7\u00e3o de fun\u00e7\u00e3o\nresource \"aws_iam_role\" \"role\" {\nname = \"lambda-vpc-sqs-role-terraform\"\nassume_role_policy = jsonencode({\nVersion = \"2012-10-17\"\nStatement = [{\nAction = \"sts:AssumeRole\"\nEffect = \"Allow\"\nPrincipal = {\nService = \"lambda.amazonaws.com\"\n}\n}]\n})\n}\n# Cria uma policy \nresource \"aws_iam_policy\" \"policy\" {\nname = \"necessary-policy\"\npolicy = jsonencode({\n\"Version\" : \"2012-10-17\",\n\"Statement\" : [\n{\n\"Sid\" : \"VisualEditor0\",\n\"Effect\" : \"Allow\",\n\"Action\" : [\n\"ec2:CreateNetworkInterface\",\n\"ec2:DescribeNetworkInterfaces\",\n\"ec2:DeleteNetworkInterface\"\n],\n\"Resource\" : \"*\"\n},\n{\n\"Effect\" : \"Allow\",\n\"Action\" : [\n\"sqs:ReceiveMessage\",\n\"sqs:DeleteMessage\",\n\"sqs:GetQueueAttributes\",\n\"sqs:SendMessage\",\n\"sqs:GetQueueUrl\"\n],\n\"Resource\" : \"*\"\n},\n{\n\"Effect\" : \"Allow\",\n\"Action\" : [\n\"logs:CreateLogGroup\",\n\"logs:CreateLogStream\",\n\"logs:PutLogEvents\"\n],\n\"Resource\" : \"arn:aws:logs:*:*:*\"\n}\n]\n})\n}\n#associamos a policy \u00e0 fun\u00e7\u00e3o IAM\nresource \"aws_iam_role_policy_attachment\" \"example\" {\npolicy_arn = aws_iam_policy.policy.arn\nrole       = aws_iam_role.role.name\n}\n</code></pre> <p>Vamos agora criar o pacote de implanta\u00e7\u00e3o do Lambda.</p> <p>Primeiramente, vamos criar uma pasta que servir\u00e1 para a instala\u00e7\u00e3o da biblioca que usaremos no c\u00f3digo Python e o arquivo em si, que ser\u00e3o compactados posteriormente.</p> <p>Rode o comando abaixo no terminal para criar a pasta com o nome source_lambda:</p> <p><pre><code>mkdir source_lambda \n</code></pre> Agora, vamos instalar a biblioteca na pasta criada:</p> <pre><code>pip install --target source_lambda pymysql\n</code></pre> <p>Feito isso, vamos criar o nosso c\u00f3digo para a fun\u00e7\u00e3o Lambda.</p> <p>O exemplo de c\u00f3digo Python a seguir usa o pacote PyMySQL para abrir uma conex\u00e3o com seu banco de dados. Na primeira vez que voc\u00ea invoca sua fun\u00e7\u00e3o, ela tamb\u00e9m cria uma nova tabela chamada Customer. A tabela usa o seguinte esquema, em que CustID \u00e9 a chave prim\u00e1ria:</p> <pre><code>Customer(CustID, Name)\n</code></pre> <p>A fun\u00e7\u00e3o tamb\u00e9m usa a PyMySQL para adicionar registros a essa tabela. A fun\u00e7\u00e3o adiciona registros usando os IDs de clientes e nomes especificados nas mensagens que voc\u00ea adicionar\u00e1 \u00e0 sua fila do Amazon SQS.</p> <p>Observe que o c\u00f3digo cria a conex\u00e3o com seu banco de dados fora da fun\u00e7\u00e3o do manipulador. A cria\u00e7\u00e3o da conex\u00e3o no c\u00f3digo de inicializa\u00e7\u00e3o permite que a conex\u00e3o seja reutilizada por invoca\u00e7\u00f5es subsequentes de sua fun\u00e7\u00e3o e melhora o desempenho. </p> <p>Adicione o novo trecho abaixo no seu main.tf: main.tf<pre><code># Cria uma inst\u00e2ncia de banco de dados do Amazon RDS\nresource \"aws_db_instance\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria um perfil de execu\u00e7\u00e3o de fun\u00e7\u00e3o\nresource \"aws_iam_role\" \"role\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria uma policy \nresource \"aws_iam_policy\" \"policy\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n#associamos a policy \u00e0 fun\u00e7\u00e3o IAM\nresource \"aws_iam_role_policy_attachment\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\nresource \"local_file\" \"python_script\" {\nfilename = \"./source_lambda/lambda_function.py\"\ncontent  = &lt;&lt;-EOF\nimport sys\nimport logging\nimport pymysql\nimport json\n# rds settings\nrds_host  = \"${aws_db_instance.example.endpoint}\"[:-5]\nuser_name = \"admin\"\npassword  = \"senhaDoBancoDeDados\"\ndb_name   = \"ExampleDB\"\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n# create the database connection outside of the handler to allow connections to be\n# re-used by subsequent function invocations.\ntry:\n    conn = pymysql.connect(host=rds_host, user=user_name, passwd=password, db=db_name, connect_timeout=5)\nexcept pymysql.MySQLError as e:\n    logger.error(\"ERROR: Unexpected error: Could not connect to MySQL instance.\")\n    logger.error(e)\n    sys.exit()\nlogger.info(\"SUCCESS: Connection to RDS MySQL instance succeeded\")\ndef lambda_handler(event, context):\n    \"\"\"\n    This function creates a new RDS database table and writes records to it\n    \"\"\"\n    message = event['Records'][0]['body']\n    data = json.loads(message)\n    CustID = data['CustID']\n    Name = data['Name']\n    item_count = 0\n    sql_string = f\"insert into Customer (CustID, Name) values({CustID}, '{Name}')\"\n    with conn.cursor() as cur:\n        cur.execute(\"create table if not exists Customer ( CustID  int NOT NULL, Name varchar(255) NOT NULL, PRIMARY KEY (CustID))\")\n        cur.execute(sql_string)\n        conn.commit()\n        cur.execute(\"select * from Customer\")\n        logger.info(\"The following items have been added to the database:\")\n        for row in cur:\n            item_count += 1\n            logger.info(row)\n    conn.commit()\n    return \"Added %d items to RDS MySQL table\" %(item_count)\nEOF\n}\n</code></pre></p> <p>Info</p> <p>Repare que o \"rds_host\" \u00e9 explicitamente dependente do resource que cria o banco de dados.  Al\u00e9m disso, o slicing no final \u00e9 feito pois a propriedade .endpoint retorna a porta \":3306\", que a biblioteca pymsql j\u00e1 usa por padr\u00e3o. </p> <p>Warning</p> <p>Use os valores de db_name, username e password pelos que voc\u00ea usou na cria\u00e7\u00e3o do database. Em produ\u00e7\u00e3o, \u00e9 recomendado n\u00e3o codificar esses dados em fun\u00e7\u00e3o, mas sim usar o AWS Secrets Manager para armazenar com seguran\u00e7a as credenciais de acesso ao banco de dados.</p> <p>Agora, temos tudo para criar o nosso .zip para a fun\u00e7\u00e3o Lambda:</p> main.tf<pre><code># Cria uma inst\u00e2ncia de banco de dados do Amazon RDS\nresource \"aws_db_instance\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria um perfil de execu\u00e7\u00e3o de fun\u00e7\u00e3o\nresource \"aws_iam_role\" \"role\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria uma policy \nresource \"aws_iam_policy\" \"policy\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n#associamos a policy \u00e0 fun\u00e7\u00e3o IAM\nresource \"aws_iam_role_policy_attachment\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\nresource \"local_file\" \"python_script\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\ndata \"archive_file\" \"lambda_archive\" {\ndepends_on  = [local_file.python_script]\nsource_dir  = \"./source_lambda\"\noutput_path = \"lambda_function.zip\"\ntype        = \"zip\"\n}\n</code></pre> <p>Info</p> <p>Repare que o resource \"lambda_archive\" \u00e9 implicitamente dependente do resource que cria o arquivo .py. </p> <p>Vamos criar nossa fun\u00e7\u00e3o Lambda. Fazemos isso por meio da inser\u00e7\u00e3o do resource abaixo:</p> main.tf<pre><code># Cria uma inst\u00e2ncia de banco de dados do Amazon RDS\nresource \"aws_db_instance\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria um perfil de execu\u00e7\u00e3o de fun\u00e7\u00e3o\nresource \"aws_iam_role\" \"role\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria uma policy \nresource \"aws_iam_policy\" \"policy\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n#associamos a policy \u00e0 fun\u00e7\u00e3o IAM\nresource \"aws_iam_role_policy_attachment\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria o arquivo Python\nresource \"local_file\" \"python_script\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria o ZIP para a fun\u00e7\u00e3o Lambda\ndata \"archive_file\" \"lambda_archive\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria a fun\u00e7\u00e3o Lambda\nresource \"aws_lambda_function\" \"test_lambda\" {\nfilename      = \"lambda_function.zip\"\nfunction_name = \"LambdaFunctionWithRDS-terraform\"\nrole          = aws_iam_role.role.arn\nhandler       = \"lambda_function.lambda_handler\"\nruntime       = \"python3.9\"\nvpc_config {\nsubnet_ids         = aws_default_subnet.default[*].id\nsecurity_group_ids = [aws_default_security_group.default.id]\n}\ndepends_on = [ data.archive_file.lambda_archive ]\n}\n</code></pre> <p>Info</p> <p>Repare que o resource \"test_lambda\" \u00e9 explicitamente dependente do resource que cria o arquivo .zip. </p> <p>Agora iremos configurar a VPC padr\u00e3o que \u00e9 usada pelo banco de dados e pelo Lambda. Tamb\u00e9m as mesmas sub-redes para ambos. Al\u00e9m disso, \u00e9 preciso definir regra de entrada para a porta que o banco de dados usa (:3306) e regra de sa\u00edda (deixaremos todas).</p> main.tf<pre><code># Cria uma inst\u00e2ncia de banco de dados do Amazon RDS\nresource \"aws_db_instance\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria um perfil de execu\u00e7\u00e3o de fun\u00e7\u00e3o\nresource \"aws_iam_role\" \"role\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria uma policy \nresource \"aws_iam_policy\" \"policy\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n#associamos a policy \u00e0 fun\u00e7\u00e3o IAM\nresource \"aws_iam_role_policy_attachment\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria o arquivo Python\nresource \"local_file\" \"python_script\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria o ZIP para a fun\u00e7\u00e3o Lambda\ndata \"archive_file\" \"lambda_archive\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria a fun\u00e7\u00e3o Lambda\nresource \"aws_lambda_function\" \"test_lambda\" {\n  #################\n  # C\u00f3digo omitido\n  ################ conseguimos subir um bucket privado de uso geral, podemos tamb\u00e9m modificar nossa inf\n}\n\n\nresource \"aws_default_subnet\" \"default\" {\ncount             = 6\navailability_zone = element([\"us-east-1a\", \"us-east-1b\", \"us-east-1c\", \"us-east-1d\", \"us-east-1e\", \"us-east-1f\"], count.index)\n}\nresource \"aws_default_security_group\" \"default\" {\nvpc_id = aws_default_vpc.default.id\ningress {\nfrom_port   = 3306\nto_port     = 3306\nprotocol    = \"tcp\"\ncidr_blocks = [\"0.0.0.0/0\"]\n}\negress {\nfrom_port   = 0\nto_port     = 0\nprotocol    = \"-1\"\ncidr_blocks = [\"0.0.0.0/0\"]\n}\n}\nresource \"aws_default_vpc\" \"default\" {\n}\n</code></pre> <p>Agora voc\u00ea deve criar a fila do Amazon SQS que usar\u00e1 para invocar sua fun\u00e7\u00e3o do Lambda:</p> main.tf<pre><code># Cria uma inst\u00e2ncia de banco de dados do Amazon RDS\nresource \"aws_db_instance\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria um perfil de execu\u00e7\u00e3o de fun\u00e7\u00e3o\nresource \"aws_iam_role\" \"role\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria uma policy \nresource \"aws_iam_policy\" \"policy\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n#associamos a policy \u00e0 fun\u00e7\u00e3o IAM\nresource \"aws_iam_role_policy_attachment\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria o arquivo Python\nresource \"local_file\" \"python_script\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria o ZIP para a fun\u00e7\u00e3o Lambda\ndata \"archive_file\" \"lambda_archive\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria a fun\u00e7\u00e3o Lambda\nresource \"aws_lambda_function\" \"test_lambda\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n\nresource \"aws_default_subnet\" \"default\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\nresource \"aws_default_security_group\" \"default\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\nresource \"aws_default_vpc\" \"default\" {\n}\n\n# Cria uma fila do Amazon SQS\nresource \"aws_sqs_queue\" \"my_queue\" {\nname = \"LambdaRDSQueue\"\n}\n</code></pre> <p>Agora, iremos criar um mapeamento da origem do evento para invocar sua fun\u00e7\u00e3o do Lambda. </p> <p>Um mapeamento da origem do evento \u00e9 um recurso no Lambda que l\u00ea itens de um fluxo ou de uma fila e invoca uma fun\u00e7\u00e3o do Lambda. Ao configurar um mapeamento da origem do evento, voc\u00ea pode especificar um tamanho de lote para que os registros do seu fluxo ou da sua fila sejam agrupados em uma \u00fanica carga \u00fatil. Neste exemplo, definiremos o tamanho do lote como 1 para que a fun\u00e7\u00e3o do Lambda seja invocada toda vez que voc\u00ea enviar uma mensagem para sua fila.</p> main.tf<pre><code># Cria uma inst\u00e2ncia de banco de dados do Amazon RDS\nresource \"aws_db_instance\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria um perfil de execu\u00e7\u00e3o de fun\u00e7\u00e3o\nresource \"aws_iam_role\" \"role\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria uma policy \nresource \"aws_iam_policy\" \"policy\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n#associamos a policy \u00e0 fun\u00e7\u00e3o IAM\nresource \"aws_iam_role_policy_attachment\" \"example\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria o arquivo Python\nresource \"local_file\" \"python_script\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria o ZIP para a fun\u00e7\u00e3o Lambda\ndata \"archive_file\" \"lambda_archive\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria a fun\u00e7\u00e3o Lambda\nresource \"aws_lambda_function\" \"test_lambda\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n\nresource \"aws_default_subnet\" \"default\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\nresource \"aws_default_security_group\" \"default\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\nresource \"aws_default_vpc\" \"default\" {\n}\n\n# Cria uma fila do Amazon SQS\nresource \"aws_sqs_queue\" \"my_queue\" {\n  #################\n  # C\u00f3digo omitido\n  ################\n}\n\n# Cria um mapeamento da origem do evento para invocar sua fun\u00e7\u00e3o do Lambda\nresource \"aws_lambda_event_source_mapping\" \"resource_queue\" {\nevent_source_arn = aws_sqs_queue.my_queue.arn\nfunction_name    = aws_lambda_function.test_lambda.function_name\nbatch_size       = 1\n}\n</code></pre> <p>Agora temos tudo para efetivamente usar o Terraform para criar nossa infraestrutura definida em c\u00f3digo. </p> <p>Para isso, certifique-se que voc\u00ea est\u00e1 com o terminal na pasta terraform.</p> <p>Ent\u00e3o, criamos vari\u00e1veis de ambiente com a chave que criamos no in\u00edcio:</p> <p><pre><code>export AWS_ACCESS_KEY_ID=&lt;ID_CHAVE_DE_ACESSO&gt;\nexport AWS_SECRET_ACCESS_KEY=&lt;CHAVE_SECRETA_DE_ACESSO&gt;\n</code></pre> Esse procedimento evita a exposi\u00e7\u00e3o da senha.</p> <p>Tamb\u00e9m vamos exportar a regi\u00e3o padr\u00e3o, que nesse roteiro \u00e9 \"us-east-1\":</p> <pre><code>export AWS_DEFAULT_REGION=\"us-east-1\"\n</code></pre> <p>Ap\u00f3s isso, vamos iniciar os recursos terraform necess\u00e1rios para provisionar rodando o comando abaixo:</p> <pre><code>terraform init\n</code></pre> <p>Agora veremos o plano de cria\u00e7\u00e3o desses recursos: <pre><code>terraform plan\n</code></pre></p> <p>Por fim, realize deploy dos recursos na nuvem: <pre><code>terraform apply -auto-approve\n</code></pre></p> <p>Em torno de 5 minutos, se tudo der certo, sua infraestrutura estar\u00e1 criada.</p> <p>Voc\u00ea pode verificar que o de banco de dados foi criado acessando este link. O esperado \u00e9 algo como na imagem abaixo: </p> <p>A fun\u00e7\u00e3o do IAM criada pode ser visualizada aqui. Ela possui as permiss\u00f5es definidas.  O esperado \u00e9 algo como na imagem abaixo: </p> <p>Podemos conferir nossa fun\u00e7\u00e3o Lambda aqui.O esperado \u00e9 algo como na imagem abaixo: </p> <p>E nossa fila do SQS pode ser acessada aqui. O esperado \u00e9 algo como na imagem abaixo: </p>"},{"location":"#testando-e-monitorando-a-infraestrutura","title":"Testando e monitorando a infraestrutura","text":"<p>Para testar sua configura\u00e7\u00e3o completa, adicione mensagens \u00e0 sua fila do Amazon SQS usando o console. Siga os passos abaixo:</p> <ul> <li> <p>Abra a p\u00e1gina Filas do console do Amazon SQS e selecione sua fila <code>(LambdaRDSQueue)</code>.</p> </li> <li> <p>Escolha Enviar e receber mensagens e cole o JSON a seguir no Corpo da mensagem no painel Enviar mensagem.</p> <pre><code>{\n\"CustID\": 404,\n\"Name\": \"Rodolfo Avelino\"\n}\n</code></pre> <p></p> </li> <li> <p>Escolha Send Message (Enviar mensagem). Essa a\u00e7\u00e3o far\u00e1 com que o Lambda invoque sua fun\u00e7\u00e3o por meio do mapeamento da origem do evento. </p> </li> </ul> <p>Para confirmar que o Lambda invocou sua fun\u00e7\u00e3o conforme o esperado, usaremos o CloudWatch Logs para verificar se a fun\u00e7\u00e3o gravou o nome e o ID do cliente na tabela do seu banco de dados, por meio do grupo de logs criado pela fun\u00e7\u00e3o Lambda. Para isso, siga os passos abaixo:</p> <ul> <li> <p>Abra a p\u00e1gina Grupos de logs do console do CloudWatch e selecione o grupo de logs para sua fun\u00e7\u00e3o <code>(aws/lambda/LambdaFunctionWithRDS-terraform)</code>.</p> </li> <li> <p>No painel Fluxos de logs, escolha o fluxo de logs mais recente.</p> </li> </ul> <p>Sua tabela deve conter um registro de cliente, pois houve uma invoca\u00e7\u00e3o da sua fun\u00e7\u00e3o. No fluxo de logs, voc\u00ea dever\u00e1 ver mensagens semelhantes \u00e0s seguintes:</p> <pre><code>    [INFO]  The following items have been added to the database:\n    [INFO] (404, 'Rodolfo Avelino')\n</code></pre> <p></p>"},{"location":"#excluindo-a-infraestrutura","title":"Excluindo a infraestrutura","text":"<p>Para excluir os recursos criados para este roteiro, basta executar o comando abaixo:</p> <pre><code>terraform destroy -auto-approve\n</code></pre>"},{"location":"#referencias","title":"Refer\u00eancias","text":"<p>AWS Documentation</p>"}]}